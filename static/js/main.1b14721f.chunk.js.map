{"version":3,"sources":["Algorithm/mergeSort.js","SetUp/SetUp.jsx","Algorithm/bubbleSort.js","Algorithm/selectionSort.js","Algorithm/insertionSort.js","App.js","index.js"],"names":["mergeSort","array","animation","helperArray","slice","mergeSortHelper","length","start","last","middle","Math","floor","tempIndex","left","right","push","mergeHelper","SetUp","props","state","this","getArray","num","i","getRandomNumber","setState","animations","temp","j","bubbleSortHelper","bars","document","getElementsByClassName","first","second","firstBar","style","secondBar","color","setTimeout","backgroundColor","barOneIdx","newHeight","height","index","minIndex","selectionSortHelper","min","min1","min2","j1","j2","barOneStyle","n","current","insertionSortHelper","third","fourth","fifth","sixth","seventh","eighth","bar","sortMerge","barOne","barTwo","console","log","className","onClick","reset","doBubbleSort","doSelectionSort","doInsertionSort","doMergeSort","map","value","Component","max","rand","random","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1b14721f.chunk.js","sourcesContent":["export function mergeSort(array) {\n  let animation = [];\n  let helperArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, helperArray, animation);\n  return animation;\n}\n\nfunction mergeSortHelper(array, start, last, helperArray, animation) {\n  if (start !== last) {\n    let middle = Math.floor((start + last) / 2);\n    mergeSortHelper(helperArray, start, middle, array, animation);\n    mergeSortHelper(helperArray, middle + 1, last, array, animation);\n    mergeHelper(array, start, middle, last, helperArray, animation);\n  }\n}\n\nfunction mergeHelper(array, start, middle, last, helperArray, animation) {\n  let tempIndex = start;\n  let left = start;\n  let right = middle + 1;\n  while (left <= middle && right <= last) {\n\n    /*\n    third -> are we comparing?\n    fourth -> change the color for comparing\n    fifth -> revert the color to original\n    */\n    animation.push([left, right, true, true, false]);\n\n    animation.push([left, right, true, false, true]);\n\n    if (helperArray[left] <= helperArray[right]) {\n      animation.push([tempIndex, helperArray[left], false, false, false]);\n\n      array[tempIndex] = helperArray[left];\n      tempIndex++;\n      left++;\n    } else {\n      animation.push([tempIndex, helperArray[right], false, false, false]);\n\n      array[tempIndex] = helperArray[right];\n      tempIndex++;\n      right++;\n    }\n  }\n\n  while (left <= middle) {\n    animation.push([left, left, true, true, false]);\n    animation.push([left, left, true, false, true]);\n    animation.push([tempIndex, helperArray[left], false, false, false]);\n\n    array[tempIndex] = helperArray[left];\n    tempIndex++;\n    left++;\n  }\n\n  while (right <= last) {\n    animation.push([right, right, true, true, false]);\n    animation.push([right, right, true, false, true]);\n    animation.push([tempIndex, helperArray[right], false, false, false]);\n\n    array[tempIndex] = helperArray[right];\n    tempIndex++;\n    right++;\n  }\n}\n","import {Component} from 'react';\nimport './SetUp.css';\nimport * as sortBubble from '../Algorithm/bubbleSort.js';\nimport * as sortSelection from '../Algorithm/selectionSort.js';\nimport * as sortInsertion from '../Algorithm/insertionSort.js';\nimport * as sortMerge from '../Algorithm/mergeSort.js';\n\nexport default class SetUp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getArray();\n  }\n\n  reset() {\n    this.getArray();\n  }\n\n  getArray() {\n    let array = [];\n    let num = 0;\n    for (let i = 0; i < 100; i++) {\n      num = getRandomNumber(5, 600);\n      array.push(num);\n    }\n    this.setState({array});\n  }\n\n  doBubbleSort() {\n    const animations = sortBubble.bubbleSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      let bars = document.getElementsByClassName(\"array-value\");\n      let change = (i % 4 < 2);\n      if (change) {\n        let [first, second] = animations[i];\n        let firstBar = bars[first].style;\n        let secondBar = bars[second].style;\n        let color = i % 4 === 0 ? 'red' : 'aqua';\n        setTimeout(() => {\n          firstBar.backgroundColor = color;\n          secondBar.backgroundColor = color;\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          let [barOneIdx, newHeight] = animations[i];\n          let barOneStyle = bars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * 1);\n      }\n    \n    }\n  }\n\n  doSelectionSort() {\n    const animations = sortSelection.selectionSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      let bars = document.getElementsByClassName(\"array-value\");\n      let [first, second, min, min1, min2, j, j1, j2] = animations[i];\n\n      if (min || j) {\n        let firstBar = bars[first].style;\n        let color;\n        if ((j1 && !j2)) {\n          color = 'red';\n        } else if ((min && min1 && !min2)) {\n          color = 'black';\n        } else {\n          color = 'aqua';\n        }\n        setTimeout(() => {\n          firstBar.backgroundColor = color;\n        }, i * 1);\n      } else {\n        setTimeout(() => {\n          let barOneStyle = bars[first].style;\n          barOneStyle.backgroundColor = 'aqua';\n          barOneStyle.height = `${second}px`;\n        }, i * 1);\n      }\n    }\n  }\n\n  doInsertionSort() {\n    const animations = sortInsertion.insertionSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      let bars = document.getElementsByClassName(\"array-value\");\n      let [first, second, third, fourth, fifth, sixth, seventh, eighth] = animations[i];\n      \n      if (third || sixth) {\n        let bar = bars[first].style;\n        let color;\n        if (third && fourth && !fifth) {\n          color = \"black\";\n        } else if (third && !fourth && fifth) {\n          color = \"aqua\";\n        } else if (sixth && seventh && !eighth) {\n          color = \"red\";\n        } else if (sixth && !seventh && eighth) {\n          color = \"aqua\";\n        }\n        setTimeout(() => {\n          bar.backgroundColor = color;\n        }, i * 10);\n        \n      } else {\n        /*\n        overwrite the height here\n        */\n        setTimeout(() => {\n          let bar = bars[first].style;\n          bar.backgroundColor = \"brown\";\n          bar.height = `${second}px`;\n          bar.backgroundColor = \"aqua\";\n        }, i * 10);\n       \n      }\n    }\n  }\n\n  doMergeSort() {\n    \n    let grid = this.state.array;\n    let animation = sortMerge.mergeSort(grid);\n    \n    for (let i = 0; i < animation.length; i++) {\n      let bars = document.getElementsByClassName(\"array-value\");\n      let [first, second, third, fourth, fifth] = animation[i];\n      \n      let color;\n      if (third) {\n        let barOne = bars[first].style;\n        let barTwo = bars[second].style;\n        if (fourth && !fifth) {\n          color = \"red\";\n        }\n        if (!fourth && fifth) {\n          color = \"aqua\";\n        }\n        setTimeout(() => {\n          barOne.backgroundColor = color;\n          barTwo.backgroundColor = color;\n        }, i * 10);\n      } else {\n        setTimeout(() => {\n          let bar = bars[first].style;\n          bar.height = `${second}px`;\n        }, i * 10);\n      }\n    }\n    \n    \n    \n  }\n\n  render() {\n    const {array} = this.state;\n    console.log(array);\n\n    return (\n      <div className=\"set\">\n        <div className='buttons'>\n          <div className=\"reset\"> \n            <button onClick={() => this.reset()}> Reset Array </button>\n          </div>\n          <div className=\"bubble-sort\">\n            <button onClick={() => this.doBubbleSort()}> Bubble Sort </button>\n          </div>\n          <div className=\"quick-sort\">\n            <button onClick={() => this.doSelectionSort()}> Selection Sort </button>\n          </div>\n          <div className=\"insertion-sort\">\n            <button onClick={() => this.doInsertionSort()}> Insertion Sort </button>\n          </div>\n          <div className=\"merge-sort\">\n            <button onClick={() => this.doMergeSort()}> Merge Sort </button>\n          </div>\n        </div>\n        <div className=\"bars\">\n          {array.map((value, index) => (\n            <div \n              className=\"array-value\" \n              key={index} \n              style={{height: `${value}px`, backgroundColor: 'aqua'}}>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n}\n\n/*\n  Got the formula to get random numbers from \"https://stackoverflow.com/questions/45175836/random-number-using-react-js\"\n*/\nfunction getRandomNumber(min, max) {\n  let rand = min + Math.random() * (max - min);\n  return Math.floor(rand);\n}\n\n/*\nfunction isEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false;\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n*/\n\n\n\n","export function bubbleSort (array) {\n  var animation = [];\n  var result = bubbleSortHelper(animation, array);\n  return result;\n} \n\nfunction bubbleSortHelper (animation, array) {\n  var temp  = 0;\n  for (var i = 0; i < array.length; i++) {\n    for (var j = 0; j < (array.length - i - 1); j++) {\n\n      // two values that we are going to compare... \n      animation.push([j, j + 1]);\n\n      // two values that we are going to change to original color after\n      // comparing is done\n      animation.push([j, j + 1]);\n\n\n      if (array[j] > array[j + 1]) {\n\n        // pushing animation for the swapping\n        // left bar css property overrides the right bar's css property and vice versa\n        // first parameter = index of the element\n        // second parameter = height of the element bar\n        animation.push([j, array[j + 1]]);\n        animation.push([j + 1, array[j]]);\n\n        temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        \n      } else {\n\n        // pushing animation for the swapping \n        animation.push([j, array[j]]);\n        animation.push([j + 1, array[j + 1]]);\n      }\n    }\n  }\n  \n  return animation;\n}\n","export function selectionSort (array) {\n  var animation = [];\n  var result = selectionSortHelper(animation, array);\n  return result;\n} \n\n\nfunction selectionSortHelper(animation, array) {\n  let index = array.length;\n\n  for (let i = 0; i < index - 1; i++) {\n    let minIndex = i;\n    \n    // first -> bar that we are highlighting for minIndex\n    // third -> change minIndex color\n    // fourth -> changing the minIndex color to show that we are comparing it\n    // fifth -> changing the minIndex index bar color to show that we are done comparing it\n    // sixth -> changing the \"j\" index bar color\n    // seventh -> changing the \"j\" index bar color to show that we are comparing it\n    // eighth -> changing the \"j\" index bar color to show that we are done comparing it\n    animation.push([minIndex, minIndex, true, true, false, false, false, false]);\n\n    for (let j = i + 1; j < index; j++) {\n\n      animation.push([j, j, false, false, false, true, true, false]);\n\n      if (array[j] < array[minIndex]) {\n\n        // to change the minIndex bar color back to normal\n        //animation.push([minIndex, minIndex, true, false, true, false, false, false]);\n\n        minIndex = j;\n\n        // to change the color of the new minIndex\n        //animation.push([minIndex, minIndex, true, true, false, false, false, false]);\n      }\n\n      animation.push([j, j, false, false, false, true, false, true]);\n\n    }\n\n    if (minIndex !== i) {\n\n      // overwrite height of array[i] with array[minHeight]\n      animation.push([minIndex, array[i], false, false, false, false, false, false]);\n\n      // overwrite height of array[minIndex] with array[i]\n      animation.push([i, array[minIndex], false, false, false, false, false, false]);\n\n      // animation.push([i, i, false, false, false, true, false, true]);\n\n    } \n\n    animation.push([minIndex, minIndex, true, false, true, false, false, false]);\n\n    let temp = array[minIndex];\n    array[minIndex] = array[i];\n    array[i] = temp;\n\n    \n  }\n\n  return animation;\n}\n\n","export function insertionSort (array) {\n  var animation = [];\n  var result = insertionSortHelper(animation, array);\n  return result;\n} \n\nfunction insertionSortHelper(animation, array) {\n  let n = array.length;\n\n  for (let i = 1; i < n; i++) {\n    let current = array[i];\n\n    // first -> current index that we are comparing\n    // second -> the height of the bar\n    // third -> is this pivot\n    // fourth -> change pivot color\n    // fifth -> revert pivot color\n    // sixth -> is this non-pivot\n    // seventh -> change non-pivot color\n    // eighth -> revert non-pivot color\n    // nineth -> overwrite the height\n    animation.push([i, array[i], true, true, false, false, false, false]);\n\n    let j = i - 1;\n\n\n    while ((j >= 0)) {\n\n      animation.push([j, array[i], false, false, false, true, true, false]);\n\n      if (array[j] > current) {\n\n        animation.push([j + 1, array[j], false, false, false, false, false, false])\n\n        array[j + 1] = array[j];\n\n\n      } else {\n        animation.push([j, array[i], false, false, false, true, false, true]);\n        break;\n      }\n\n      animation.push([j, array[i], false, false, false, true, false, true]);\n      j--;\n    }\n\n    animation.push([j + 1, current, false, false, false, false, false, false])\n    array[j + 1] = current;\n\n    animation.push([i, array[i], true, false, true, false, false, false]);\n  }\n\n  return animation;\n}","import './App.css';\n\nimport SetUp from './SetUp/SetUp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SetUp ></SetUp>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}